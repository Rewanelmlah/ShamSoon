import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:lottie/lottie.dart';
import 'package:shamsoon/core/app_colors.dart';
import 'package:shamsoon/core/helpers/helpers.dart';
import 'package:shamsoon/core/shared/base_model.dart';
import 'package:shamsoon/core/widgets/app_text.dart';
import 'package:shamsoon/core/widgets/buttons/loading_button.dart';
import 'package:shamsoon/core/widgets/custom_dialog.dart';
import 'package:shamsoon/core/widgets/custom_loading.dart';
import 'package:shamsoon/features/community/data/data_source/comments_data_source.dart';
import 'package:shamsoon/features/community/data/models/comments.dart';
import 'package:shamsoon/features/community/data/models/post.dart';
import 'package:shamsoon/features/community/presentation/comments_cubit/comments_cubit.dart';
import 'package:shamsoon/features/community/presentation/comments_cubit/comments_state.dart';
import 'package:shamsoon/generated/assets.dart';
import '../../../../core/widgets/easy_pagination.dart';

class CommentsScreen extends StatelessWidget {

  final Post post;
  const CommentsScreen({super.key,
    required this.post
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: CommentsScreenBody(post: post),
    );
  }
}

class CommentsScreenBody extends StatefulWidget {
  final Post post;
  const CommentsScreenBody({super.key,
    required this.post
  });


  @override
  State<CommentsScreenBody> createState() => _CommentsScreenBodyState();
}

class _CommentsScreenBodyState extends State<CommentsScreenBody> {
  final TextEditingController _commentController = TextEditingController();
  List<String> comments = [
    "Try using a soft brush",
    "Use a microfiber cloth for better results",
    "Avoid using harsh chemicals",
    "Use a damp microfiber cloth.",
    "Avoid direct sunlight while cleaning.",
  ];

  void addComment() {
    if (_commentController.text.isNotEmpty) {
      // setState(() {
        // comments.add(_commentController.text);
        // _commentController.clear();
      // });
    }
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (context) => CommentsCubit(),
      child: Builder(
        builder: (ctx) {
          return Scaffold(
            resizeToAvoidBottomInset: true,
            appBar: AppBar(
              backgroundColor: AppColors.primaryColor,
              centerTitle: true,
              title: Text(
                "Replies",
                style: TextStyle(fontSize: 18.sp, fontWeight: FontWeight.bold, color: Colors.white),
              ),
            ),
            body: Padding(
              padding: EdgeInsets.all(5.w),
              child: EasyPagination<BaseModel<CommentsResponse>, PostComment>.listView(
                loadingBuilder: CustomLoading.showLoadingView(),
                controller: ctx.read<CommentsCubit>().commentsController,
                shrinkWrap: true,
                asyncCall: (currentPage) async => await CommentsDataSourceImpl().getAllComments(widget.post.id.toString()),
                mapper: (response) => DataListAndPaginationData(
                  data: response.data.comments,
                  paginationData: PaginationData(
                    totalPages: response.data.totalPagesNumber
                  )
                ),
                errorMapper: ErrorMapper(errorWhenDio: (e) => e.response?.data['message']),
                itemBuilder: (data, index) => Card(
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10.r),
                  ),
                  elevation: 1,
                  child: Padding(
                    padding: EdgeInsets.all(10.w),
                    child: ListTile(
                      leading: CircleAvatar(
                        backgroundImage: const AssetImage('assets/images/logo.png'),
                        radius: 20.r,
                      ),
                      title: Text(
                        widget.post.user?.name ?? 'no name',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 14.sp,
                        ),
                      ),
                      subtitle: Text(
                        data[index].content?? 'no content',
                        style: TextStyle(fontSize: 12.sp),
                      ),
                      trailing: IconButton(
                          onPressed: () => showCustomDialog(context, child: Column(
                            spacing: 10.h,
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              SizedBox.square(
                                dimension: 80.r,
                                  child: Lottie.asset(Assets.lottieApiError)),
                              AppText('Delete your comment?', fontSize: 14.sp, fontWeight: FontWeight.bold),
                              Row(
                                children: [
                                  Expanded(
                                      child: BlocListener<CommentsCubit, CommentsState>(
                                        listener: (context, state) => Helpers.manageBlocConsumer(
                                            state.baseStatus,
                                            msg: state.msg,
                                            actionWhenSuccess: () => Navigator.pop(context)
                                        ),
                                        child: LoadingButton(
                                            onTap: () => ctx.read<CommentsCubit>().deleteComment(
                                                index: index,
                                                comment: data[index]
                                            ),
                                            color: Colors.red,
                                            title: 'Yes, Delete'
                                        ),
                                      )
                                  ),
                                  Expanded(
                                      child: LoadingButton(
                                          onTap: () => Navigator.pop(context),
                                          title: 'Cancel'
                                      )
                                  )
                                ],
                              )
                            ],
                          )),
                          icon: const Icon(Icons.more_vert)
                      ),
                    ),
                  ),
                ),
              ),
            ),
            bottomNavigationBar: Padding(
              padding: EdgeInsets.all(20.w),
              child: Row(
                children: [
                  Expanded(
                    child: TextField(
                      controller: _commentController,
                      style: TextStyle(fontSize: 14.sp),
                      decoration: InputDecoration(
                        hintText: "Add Comment ...",
                        hintStyle: TextStyle(fontSize: 12.sp, color: AppColors.primaryColor),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(20.r),
                          borderSide: BorderSide(color: AppColors.primaryColor, width: 2.w),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(20.r),
                          borderSide: BorderSide(color: AppColors.primaryColor, width: 2.w),
                        ),
                        errorBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(20.r),
                          borderSide: BorderSide(color: AppColors.primaryColor, width: 2.w),
                        ),
                        focusedErrorBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(20.r),
                          borderSide: BorderSide(color: AppColors.primaryColor, width: 2.w),
                        ),
                        contentPadding: EdgeInsets.symmetric(horizontal: 12.w, vertical: 10.h),
                      ),
                    ),
                  ),
                  SizedBox(width: 5.w),
                  IconButton(
                    icon: Icon(Icons.send, color: AppColors.primaryColor, size: 22.sp),
                    onPressed: () {
                      ctx.read<CommentsCubit>().createComment(
                        postId: widget.post.id.toString(),
                        content: _commentController.text,
                        index: ctx.read<CommentsCubit>().commentsController.items.value.length
                      );
                      _commentController.clear();
                    }
                  ),
                ],
              ),
            ),
          );
        }
      ),
    );
  }
}
